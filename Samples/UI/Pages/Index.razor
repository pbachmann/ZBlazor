@page "/"

<h3>QuickInput</h3>

<div>
    <QuickInput placeholder="Enter an icon name"
                Data="iconNames"
                Class="form-control"
                MaxItemsToShow="maxItemsToShow"
                TItem="string"
                OnItemSelected="OnItemSelected"
                HighlightMatches="highlightMatches"
                SelectFirstMatch="selectFirstMatch"
                ShowClearButton="showClearButton"
                OpenOnFocus="openOnFocus"
                ClearOnEscape="clearOnEscape"
                ClearAfterSelection="clearAfterSelection"
                RecentRepository="@(new InMemoryRecentRepository("IconPicker"))"
                AllowCustomValues="allowCustomInputValue" />
</div>

@*
    <div>
        <QuickInput placeholder="Enter a rating"
                    Data="Ratings"
                    Class="form-control"
                    MaxItemsToShow="maxItemsToShow"
                    TItem="RatingItem"
                    OnItemSelected="OnRatingSelected"
                    HighlightMatches="highlightMatches"
                    SelectFirstMatch="selectFirstMatch"
                    ShowClearButton="showClearButton"
                    OpenOnFocus="openOnFocus"
                    ClearOnEscape="clearOnEscape"
                    ClearAfterSelection="clearAfterSelection"
                    OtherMatchFields="@(new[] { "Rating" })"
                    ShowOtherMatches="true"
                    AllowCustomValues="allowCustomInputValue">
            <ItemTemplate>
                <strong>Rating:</strong> @context.GetDisplayText(showOtherMatches: showOtherMatches)
            </ItemTemplate>
            <NoResultsView>Nothing to see here!</NoResultsView>
        </QuickInput>
    </div>
*@

<hr />

<label>Current Value:</label> @inputValue

<div class="form-check">
    <label class="form-check-label">
        <input class="form-check-input" type="checkbox" @bind="openOnFocus">
        Open on focus
    </label>
</div>
<div class="form-check">
    <label class="form-check-label">
        <input class="form-check-input" type="checkbox" @bind="highlightMatches">
        Highlight matches
    </label>
</div>
<div class="form-check">
    <label class="form-check-label">
        <input class="form-check-input" type="checkbox" @bind="selectFirstMatch">
        Select first match
    </label>
</div>
<div class="form-check">
    <label class="form-check-label">
        <input class="form-check-input" type="checkbox" @bind="showClearButton">
        Show clear button
    </label>
</div>
<div class="form-check">
    <label class="form-check-label">
        <input class="form-check-input" type="checkbox" @bind="clearOnEscape">
        Clear on escape
    </label>
</div>
<div class="form-check">
    <label class="form-check-label">
        <input class="form-check-input" type="checkbox" @bind="clearAfterSelection">
        Clear after selection
    </label>
</div>
<div class="form-check">
    <label class="form-check-label">
        <input class="form-check-input" type="checkbox" @bind="showOtherMatches">
        Show other matches
    </label>
</div>
<div class="form-check">
    <label class="form-check-label">
        <input class="form-check-input" type="checkbox" @bind="allowCustomInputValue">
        Allow custom input value
    </label>
</div>

<form class="form-inline" style="margin-bottom: 20px;">
    <div class="form-group">
        <label style="margin-right: 10px;">Max items to show</label>
        <input type="number" class="form-control" style="width: auto;" @bind="maxItemsToShow">
    </div>
</form>

<div style="background-color:lightgrey; padding: 15px; border-radius: 10px;">
    <pre style="margin-bottom: 0;"><code>@System.Text.Json.JsonSerializer.Serialize(selectedItems, new System.Text.Json.JsonSerializerOptions { WriteIndented = true })</code></pre>
</div>

@code {
    string inputValue = "";
    bool openOnFocus = true;
    bool highlightMatches = true;
    bool selectFirstMatch = true;
    bool clearOnEscape = true;
    int maxItemsToShow = 10;
    bool showClearButton = true;
    bool clearAfterSelection = true;
    bool showOtherMatches = true;
    bool allowCustomInputValue = true;

    List<string?> selectedItems = new List<string?>();

    string[] iconNames = Enum.GetNames(typeof(IconName));

    string[] countries = null!;

    RatingItem[] Ratings = new[]
    {
        new RatingItem("Very good", 5001),
        new RatingItem("Good", 4002),
        new RatingItem("Fair", 300303),
        new RatingItem("Poor", 200404),
        new RatingItem("Very poor", 100507)
    };

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            countries = TestData.CountryNames;
            StateHasChanged();
        }
    }

    void OnItemSelected(string text)
    {
        selectedItems.Add(text);
    }

    void OnRatingSelected(RatingItem? rating)
    {
        selectedItems.Add(rating?.Text);
    }

    class RatingItem
    {
        public RatingItem(string text, int rating)
        {
            Text = text;
            Rating = rating;
        }

        public string Text { get; set; } = null!;
        public int Rating { get; set; }
    }
}
